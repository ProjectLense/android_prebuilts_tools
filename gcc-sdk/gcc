#!/bin/bash

HOST_OS=`uname -s | tr '[:upper:]' '[:lower:]'`
if [ "$HOST_OS" != "linux" ] ; then
  echo "ERROR: The gcc this script points to can only run on linux" >&2
  exit 1
fi


# determine if host is running 64-bit OS.
# Note that "uname -m" only show host CPU is capable of.  Use the following technique
# from ndk/build/core/ndk-common.sh instead
is_64bit() {
  file -L "$SHELL" | grep -q "x86[_-]64" && return 0 || return 1
}

PROGNAME=`basename $0`

#PREFIX32=../../gcc/linux-x86/host/i686-linux-glibc2.7-4.4.3/bin/i686-linux  # previous version
PREFIX32=../../gcc/linux-x86/host/i686-linux-glibc2.7-4.6/bin/i686-linux
PREFIX64=../../gcc/linux-x86/host/x86_64-linux-glibc2.7-4.6/bin/x86_64-linux

options=" ${@} "   # sentinel prefix/suffix space to simplify pattern match below

suffix_m32=${options##* -m32 }    # suffix after the last -m32
suffix_m64=${options##* -m64 }    # suffix after the last -m64

len_m32=${#suffix_m32}            # length of suffix after the last -m32
len_m64=${#suffix_m64}            # length of suffix after the last -m64

# check for -m32/-m64
if [ $len_m32 -gt $len_m64 ]; then
    # -m64 after -m32
    use_64=1
elif [ $len_m64 -gt $len_m32 ]; then
    # -m32 after -m64
    use_64=0
elif is_64bit; then
    # neither -m32 nor -m64 passed, choose whether to use
    # 32 or 64 bit based on host arch
    use_64=1
else
    use_64=0
fi

if [ $use_64 -eq 1 ]; then
  MY_TOOL=`dirname $0`/${PREFIX64}-${PROGNAME}
  if ! is_64bit; then
    echo "ERROR: $MY_TOOL only runs on 64-bit linux" >&2
    exit 1
  fi
else
  MY_TOOL=`dirname $0`/${PREFIX32}-${PROGNAME}
fi

exec $MY_TOOL "$@"
